/* tslint:disable */
/* eslint-disable */
/**
 * BIDS WebRTC Signaling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationInfo,
} from '../models/index';
import {
    ApplicationInfoFromJSON,
    ApplicationInfoToJSON,
} from '../models/index';

export interface GetApplicationInfoRequest {
    appId: string;
}

export interface PostApplicationInfoRequest {
    applicationInfo: Omit<ApplicationInfo, 'app_id'|'created_at'>;
}

/**
 * 
 */
export class ApplicationManagementApi extends runtime.BaseAPI {

    /**
     * IDを指定してアプリケーションの情報を取得する 
     * Applicationの情報を取得する
     */
    async getApplicationInfoRaw(requestParameters: GetApplicationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationInfo>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getApplicationInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationInfoFromJSON(jsonValue));
    }

    /**
     * IDを指定してアプリケーションの情報を取得する 
     * Applicationの情報を取得する
     */
    async getApplicationInfo(requestParameters: GetApplicationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationInfo> {
        const response = await this.getApplicationInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アプリケーションを作成する (アプリ作成権限がある場合のみ実行可能) 
     * Applicationを作成する
     */
    async postApplicationInfoRaw(requestParameters: PostApplicationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationInfo>> {
        if (requestParameters['applicationInfo'] == null) {
            throw new runtime.RequiredError(
                'applicationInfo',
                'Required parameter "applicationInfo" was null or undefined when calling postApplicationInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationInfoToJSON(requestParameters['applicationInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationInfoFromJSON(jsonValue));
    }

    /**
     * アプリケーションを作成する (アプリ作成権限がある場合のみ実行可能) 
     * Applicationを作成する
     */
    async postApplicationInfo(requestParameters: PostApplicationInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationInfo> {
        const response = await this.postApplicationInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
