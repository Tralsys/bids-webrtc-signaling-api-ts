/* tslint:disable */
/* eslint-disable */
/**
 * BIDS WebRTC Signaling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientInfo,
  ClientInfoWithToken,
  GetClientInfoList401Response,
} from '../models/index';
import {
    ClientInfoFromJSON,
    ClientInfoToJSON,
    ClientInfoWithTokenFromJSON,
    ClientInfoWithTokenToJSON,
    GetClientInfoList401ResponseFromJSON,
    GetClientInfoList401ResponseToJSON,
} from '../models/index';

export interface DeleteClientInfoRequest {
    clientId: string;
}

export interface GetClientAccessTokenRequest {
    body: string;
}

export interface GetClientInfoRequest {
    clientId: string;
}

export interface RegisterClientInfoRequest {
    clientInfo: Omit<ClientInfo, 'client_id'|'created_at'>;
}

/**
 * 
 */
export class ClientManagementApi extends runtime.BaseAPI {

    /**
     * クライアントの情報を削除する 
     * Clientの情報を削除する
     */
    async deleteClientInfoRaw(requestParameters: DeleteClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling deleteClientInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * クライアントの情報を削除する 
     * Clientの情報を削除する
     */
    async deleteClientInfo(requestParameters: DeleteClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClientInfoRaw(requestParameters, initOverrides);
    }

    /**
     * リフレッシュトークンを用いて、アクセストークンを取得する 
     * Clientのアクセストークンを取得する
     */
    async getClientAccessTokenRaw(requestParameters: GetClientAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getClientAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/jose';

        const response = await this.request({
            path: `/client_token`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * リフレッシュトークンを用いて、アクセストークンを取得する 
     * Clientのアクセストークンを取得する
     */
    async getClientAccessToken(requestParameters: GetClientAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getClientAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IDを指定してクライアントの情報を取得する 
     * Clientの情報を取得する
     */
    async getClientInfoRaw(requestParameters: GetClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientInfo>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling getClientInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientInfoFromJSON(jsonValue));
    }

    /**
     * IDを指定してクライアントの情報を取得する 
     * Clientの情報を取得する
     */
    async getClientInfo(requestParameters: GetClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientInfo> {
        const response = await this.getClientInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーに紐づいたクライアントの情報一覧を取得する  ページングは未実装 
     * Clientの情報一覧を取得する
     */
    async getClientInfoListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientInfoFromJSON));
    }

    /**
     * ユーザーに紐づいたクライアントの情報一覧を取得する  ページングは未実装 
     * Clientの情報一覧を取得する
     */
    async getClientInfoList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientInfo>> {
        const response = await this.getClientInfoListRaw(initOverrides);
        return await response.value();
    }

    /**
     * クライアントの情報を登録する 
     * Clientの情報を登録する
     */
    async registerClientInfoRaw(requestParameters: RegisterClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientInfoWithToken>> {
        if (requestParameters['clientInfo'] == null) {
            throw new runtime.RequiredError(
                'clientInfo',
                'Required parameter "clientInfo" was null or undefined when calling registerClientInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientInfoToJSON(requestParameters['clientInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientInfoWithTokenFromJSON(jsonValue));
    }

    /**
     * クライアントの情報を登録する 
     * Clientの情報を登録する
     */
    async registerClientInfo(requestParameters: RegisterClientInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientInfoWithToken> {
        const response = await this.registerClientInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
